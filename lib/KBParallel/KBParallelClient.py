# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class KBParallel(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_batch(self, params, context=None):
        """
        :param params: instance of type "RunBatchParams" (runner =
           serial_local | parallel_local | parallel) -> structure: parameter
           "tasks" of list of type "Task" (Specifies a task to run. 
           Parameters is an arbitrary data object passed to the function.  If
           it is a list, the params will be interpreted as) -> structure:
           parameter "function" of type "Function" (Specifies a specific
           KBase module function to run) -> structure: parameter
           "module_name" of String, parameter "function_name" of String,
           parameter "version" of String, parameter "params" of unspecified
           object, parameter "runner" of String, parameter
           "concurrent_local_tasks" of Long, parameter
           "concurrent_njsw_tasks" of Long, parameter "max_retries" of Long
        :returns: instance of type "BatchResults" (The list of results will
           be in the same order as the input list of tasks.) -> structure:
           parameter "results" of list of type "TaskResult" -> structure:
           parameter "function" of type "Function" (Specifies a specific
           KBase module function to run) -> structure: parameter
           "module_name" of String, parameter "function_name" of String,
           parameter "version" of String, parameter "params" of unspecified
           object, parameter "returned" of unspecified object, parameter
           "error" of unspecified object, parameter "run_context" of type
           "RunContext" (location = local | njsw job_id = '' | [njsw_job_id]
           May want to add: AWE node ID, client group, total run time, etc)
           -> structure: parameter "location" of String, parameter "job_id"
           of String
        """
        return self._client.call_method(
            'KBParallel.run_batch',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('KBParallel.status',
                                        [], self._service_ver, context)
