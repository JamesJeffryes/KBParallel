# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class KBparallel(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver=None,
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('KBparallel', job_id)

    def _run_submit(self, input_params, context=None):
        return self._client._submit_job(
             'KBparallel.run', [input_params],
             self._service_ver, context)

    def run(self, input_params, context=None):
        """
        :param input_params: instance of type "KBparallelrunInputParams"
           (run() method) -> structure: parameter "module_name" of String,
           parameter "method_name" of String, parameter "service_ver" of
           String, parameter "method_params" of list of unspecified object,
           parameter "client_class_name" of String, parameter "time_limit" of
           Long
        :returns: instance of type "KBparallelOutputObj" -> structure:
           parameter "report" of type "Report" (A simple Report of a method
           run in KBase. It only provides for now a way to display a fixed
           width text output summary message, a list of warnings, and a list
           of objects created (each with descriptions). @optional warnings
           file_links html_links direct_html direct_html_link_index @metadata
           ws length(warnings) as Warnings @metadata ws length(text_message)
           as Size(characters) @metadata ws length(objects_created) as
           Objects Created) -> structure: parameter "text_message" of String,
           parameter "warnings" of list of String, parameter
           "objects_created" of list of type "WorkspaceObject" (Represents a
           Workspace object with some brief description text that can be
           associated with the object. @optional description) -> structure:
           parameter "ref" of type "ws_id" (@id ws), parameter "description"
           of String, parameter "file_links" of list of type "LinkedFile"
           (Represents a file or html archive that the report should like to
           @optional description) -> structure: parameter "handle" of type
           "handle_ref" (Reference to a handle @id handle), parameter
           "description" of String, parameter "name" of String, parameter
           "URL" of String, parameter "html_links" of list of type
           "LinkedFile" (Represents a file or html archive that the report
           should like to @optional description) -> structure: parameter
           "handle" of type "handle_ref" (Reference to a handle @id handle),
           parameter "description" of String, parameter "name" of String,
           parameter "URL" of String, parameter "direct_html" of String,
           parameter "direct_html_link_index" of Long, parameter "msg" of
           String
        """
        job_id = self._run_submit(input_params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, input_params, context=None):
        """
        :param input_params: instance of type "KBparallelstatusInputParams"
           (status() method) -> structure: parameter "joblist" of list of Long
        :returns: instance of type "KBparallelstatusOutputObj" -> structure:
           parameter "num_jobs_checked" of Long, parameter "jobstatus" of
           list of String
        """
        return self._client.call_method(
            'KBparallel.status',
            [input_params], self._service_ver, context)

    def cancel_run(self, input_params, context=None):
        """
        :param input_params: instance of type "KBparallelcancel_runInput"
           (cancel_run() method)
        :returns: instance of type "KBparallelcancel_runOutput"
        """
        return self._client.call_method(
            'KBparallel.cancel_run',
            [input_params], self._service_ver, context)

    def getlog(self, input_params, context=None):
        """
        :param input_params: instance of type "KBparallelgetlogInput"
           (getlog() method)
        :returns: instance of type "KBparallelgetlogOutput"
        """
        return self._client.call_method(
            'KBparallel.getlog',
            [input_params], self._service_ver, context)
